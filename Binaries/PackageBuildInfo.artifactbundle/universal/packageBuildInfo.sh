#!/bin/bash
#
# packageBuildInfo.sh
# Generate .swift file with info from git repo
# Part of PackageBuildInfo plugin (https://github.com/DimaRU/PackageBuildInfo)
#
# Copyright Â© 2024 Dmitriy Borovikov. All rights reserved.
#
if [[ $# != 2 ]]; then
    echo "USAGE: packageBuildInfo <git directory> <output file>"
    exit 1
fi

gitDirectory=$1
cd "$gitDirectory" || exit 2

function trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"

    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    output=$var
}

function runGit() {
    out=$($1 2>&1)
    exitCode=$?
    trim "$out"
}

function getGitInfo() {
    runGit "git status --porcelain -uno"
    if [[ $exitCode != 0 ]]; then
        echo "$output" >&2
        return
    fi
    if [[ ${#output} == 0 ]]; then
        isDirty="false"
    fi

    runGit "git describe --tags --abbrev=0"
    if [[ $exitCode == 0 && ${#output} != 0 ]]; then
        tag=\"$output\"
        runGit "git rev-list --count $output..HEAD"
        if [[ ${#output} != 0 ]]; then
            countSinceTag=$output
        fi
    fi

    runGit "git rev-parse --abbrev-ref HEAD"
    if [[ $exitCode == 0 && ${#output} != 0 ]]; then
        branch=\"$output\"
    fi

    runGit "git show -s --format=%H:%ct"
    if [[ $exitCode == 0 && ${#output} != 0 ]]; then
        digest=${output%:*}
        #date=${output#*:}
    fi

    runGit "git rev-list --count HEAD"
    if [[ $exitCode == 0 && ${#output} != 0 ]]; then
        count=$output
    fi

    if [[ ${#digest} != 0 ]]; then
        digestS="[0x${digest:0:2}"
        for (( start=2; start < ${#digest}; start+=2 ))
        do
            digestS+=", 0x${digest:$start:2}"
        done
        digestS+="]"
    fi
}

isDirty="true"
date=$(date +%s)
count="0"
branch="nil"
countSinceTag="0"
tag="nil"
digest=""
digestS="[]"

TZO=$(date +%z)
TZSIGN=${TZO:0:1}1
TZHOUR=10#${TZO:1:2}
TZMIN=10#${TZO:3:2}
timeZone=$((TZSIGN*((TZHOUR*60)+TZMIN)*60))

getGitInfo

echo "/////
//// Package Build info
///  Code generated by PackageBuildInfo. DO NOT EDIT.
//
import Foundation

public struct PackageBuild: Sendable {
    public let isDirty: Bool       // Dirty build - git directory is't clean.
    public let timeStamp: Date     // Time of last commit
    public let timeZone: TimeZone  // Time Zone
    public let count: Int          // Total commit count
    public let tag: String?        // Tag, if exist
    public let countSinceTag: Int  // Commit count since tag
    public let branch: String?     // Git branch name
    public let digest: [UInt8]     // Latest commit sha1 digest (20 bytes)

    public var commit: String {
        digest.reduce(\"\") { \$0 + String(format: \"%02x\", \$1) }
    }
    public static let info = PackageBuild(
                              isDirty: $isDirty,
                              timeStamp: Date(timeIntervalSince1970: $date),
                              timeZone: TimeZone(secondsFromGMT: $timeZone) ?? TimeZone.current,
                              count: $count,
                              tag: $tag,
                              countSinceTag: $countSinceTag,
                              branch: $branch,
                              digest: $digestS)
}" >"$2"
